<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="254" height="178"
		 close="titlewindow1_closeHandler(event)" enabled="true" title="パスワードの変更">
	<s:Label x="19" y="13" text="新しいパスワード："/>
	<s:TextInput x="19" y="27" width="204" text="" id="dummy" displayAsPassword="true" visible="false"/>
	<s:TextInput x="19" y="27" width="204" text="" id="pass" enter="setPassword()" displayAsPassword="true"/>
	<s:Label x="19" y="60" text="新しいパスワード（確認）："/>
	<s:TextInput x="19" y="74" width="204" text="" id="pass2" enter="setPassword()" displayAsPassword="true"/>
	<s:Button x="19" y="105" label="OK" click="setPassword();" width="94"/>
	<s:Button x="129" y="105" label="キャンセル" click="closeWindow(-1);" width="94"/>
	
	<fx:Metadata>
		[ResourceBundle("message")]
		[ResourceBundle("resource")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import jp.co.ctc.entity.MUser;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			private var passWord:String;
			private var passWord2:String;
			private var userCode:String;

			// 2016/02/24 DA ins start
			/**
			 * 従業員コード
			 */
			public function setUserCode(data:String):void {
				userCode = data;
			}
			// 2016/02/24 DA ins end
			
			/**
			 * パスワードのゲッター
			 */
			public function getPassword():String {
				return passWord;
			}

			/**
			 * メッセージを表示する。
			 *
			 * メッセージが閉じられたとき、パスワード入力欄をリセットし
			 * パスワード入力欄にフォーカスを移す。
			 */
			private function showMessage(message:String):void {
				Alert.show(message,"確認",Alert.OK,this,
					function(event:CloseEvent):void {
						pass.text = "";
						pass2.text = "";
						pass.setFocus();
					}
				);
			}

			/**
			 * パスワードのセッター
			 * OKボタン押下イベント
			 */
			private function setPassword():void {
				dummy.setFocus();
				//パスワードが入力されていれば処理を続ける
				if (pass.text == "") {
					this.showMessage("新しいパスワードを入力してください。");
					return;
				}

				//入力されたパスワードが双方とも同じ値ならば処理を続ける
				if (pass.text != pass2.text) {
					this.showMessage("入力されたパスワードと確認パスワードが異なります。");
					return;
				}
				
				//入力されたパスワードが32文字以内なら処理を続ける。
				if (pass.text.length > 32) {
					this.showMessage("パスワードは32文字以内で入力してください。");
					return;
				}
				
				// 2016/02/24 DA ins start
				srvUser.getMUser(this.userCode);
				// 2016/02/24 DA ins end
			}

			// 2016/02/24 DA ins start
			/**
			 * ユーザ情報取得後の処理
			 */
			protected function getMUser_resultHandler(event:ResultEvent):void 
			{
				var user:MUser = event.result as MUser;
				
				//入力されたパスワードが変更前と同じでないなら処理を続ける。
				if (pass.text == user.passWord) {
					this.showMessage(resourceManager.getString('message','msg00002'));
					return;
				}
				
				srvUser.updatePassword(this.userCode, pass.text, this.userCode);
			}
			
			/**
			 * ユーザ情報更新後の処理
			 */
			protected function updatePassword_resultHandler(event:ResultEvent):void 
			{
				passWord = pass.text
				passWord2 = pass2.text
				closeWindow(1);
			}
			// 2016/02/24 DA ins end

			/**
			 * キャンセルボタンの押下イベント
			 * クローズイベントを発生させる。
			 */
			protected function closeWindow(detail:int):void {
				var closeEvent:CloseEvent = new CloseEvent(mx.events.CloseEvent.CLOSE,false,false,detail);
				dispatchEvent(closeEvent);
			}

			protected function titlewindow1_closeHandler(event:CloseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:RemoteObject id="srvUser" destination="MUserService">
			<s:method name="getMUser" result="getMUser_resultHandler(event)"/>
			<s:method name="updatePassword" result="updatePassword_resultHandler(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
</s:TitleWindow>
