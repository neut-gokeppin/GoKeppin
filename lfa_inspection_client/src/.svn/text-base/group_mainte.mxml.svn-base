<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" pageTitle="誤欠品検出力向上ツール - 工程マスタメンテナンス" creationComplete="application1_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout paddingLeft="8" paddingRight="8" paddingTop="8" paddingBottom="8" horizontalAlign="center" gap="8"/>
	</s:layout>
	<fx:Style source="lfa_inspection.css"/>

	<!-- 2016/02/24 DA ins start -->
	<fx:Metadata>
		[ResourceBundle("message")]
		[ResourceBundle("resource")]
	</fx:Metadata>
	<!-- 2016/02/24 DA ins end -->

	<fx:Script>
		<![CDATA[
			import jp.co.ctc.entity.MGroup;
			import jp.co.ctc.entity.MUser;
			import jp.co.ctc.entity.MVehicle;
			import jp.co.ctc.event.MstSelectEvent;
			import jp.co.ctc.util.MUserUtils;
			import jp.co.ctc.util.Utils;
			
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ScrollEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;

			private var rmenu:ContextMenu;
			private var rmenuitem1:ContextMenuItem;
			private var rmenuitem2:ContextMenuItem;
			private var rmenuIndex:int = -1;
			private var rmenuItem:MGroup;
			private var removedRows:ArrayCollection = new ArrayCollection();
			private var TITLE:String = "工程マスタメンテナンス";
			// 編集中の車種区分を保持する変数
			private var editBctype:String = "";
			// 2014/04/07 DA ins start
			[Bindable]
			public var DdlList:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var DdlLine:ArrayCollection = new ArrayCollection();
			// 2014/04/07 DA ins end

			// メニュー&ログイン画面から選択されたマスタ、従業員コードを取得するように修正する
			public var selectMst:int = 0;
			public var loginUser:String = "";

			// 2016/02/24 DA ins start
			private var modeContextMenu:int = 0;	// 右クリックメニューの状態（0:使用不可、1:使用可）
			public var gridScrollPosition:int = 0;	// 表示行のインデックス
			public var loginUserInfo:MUser; //ログインユーザ情報
			/**
			 * 車種の予約フラグ
			 */
			public var isReservedMVehicle:Boolean = false;
			// 2016/02/24 DA ins end

			/**
			 * 初期ロード時の処理。
			 */
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// Debug用 ****************************************
				//　Debugログインさせ、ログインが行われたようにする。
				//srvUser.login("CJ00900");
				//srvUser.setSelectMst(-1);

				srvUser.getUserCode();

				// 車種マスタを取得
				srvVehicle.getMVehicle();

				// Alertのボタンの幅を変更
				// デフォルトの60だと"キャンセル"の文字が表示しきれない。
				Alert.buttonWidth = 100;

				// 2014/04/07 DA ins start
				DdlList.removeAll();

				var asyncArea:AsyncToken = srv.getArea();//Javaのリモート呼び出し
				asyncArea.addResponder(new AsyncResponder(successFuncArea, failFuncArea));

				// line
				DdlLine.removeAll();
				var asyncLine:AsyncToken = srv.getLine();//Javaのリモート呼び出し
				asyncLine.addResponder(new AsyncResponder(successFuncLine, failFuncLine));

				// 2014/04/07 DA ins end

			}

			// 2014/04/07 DA ins start
			//リモートアクセス成功時
			private function successFuncArea(e:ResultEvent, obj:Object=null):void{
				DdlList = e.result as ArrayCollection;
				trace("success");
			}
			private function successFuncLine(e:ResultEvent, obj:Object=null):void{
				DdlLine = e.result as ArrayCollection;
				trace("success");
			}

			//リモートアクセス失敗時
			private function failFuncArea(e:FaultEvent, obj:Object=null):void{
				trace("FaultCode:" + e.fault.faultCode + "\n" + "FaultString:" + e.fault.faultString + "\n"
					+ "FaultDetail:" + e.fault.faultDetail);
				trace("fault");
			}
			private function failFuncLine(e:FaultEvent, obj:Object=null):void{
				trace("FaultCode:" + e.fault.faultCode + "\n" + "FaultString:" + e.fault.faultString + "\n"
					+ "FaultDetail:" + e.fault.faultDetail);
				trace("fault");
			}
			// 2014/04/07 DA ins end

			/**
			 * ユーザーコードの取得後の処理。
			 * ユーザーコードを持っていなければログイン画面に戻します。
			 */
			protected function getUserCode_resultHandler(event:ResultEvent):void
			{
				//ユーザコードがなければログインページに戻す
				if (event.result==null) {
					var request:URLRequest = new URLRequest("login.html");
					navigateToURL(request, "_self");
				}
				else{
					this.loginUser = event.result.toString();
					//セレクトマスタを取得
					srvUser.getSelectMst();

					// 2016/02/24 DA ins start
					// ログインユーザ情報を取得
					srvUser.getMUser(this.loginUser);
					// 2016/02/24 DA ins end
				}
			}

			/**
			 * セレクトマスタの取得後の処理。
			 * 選択したマスタに対応した表示・処理を行います。
			 */
			protected function getSelectMst_resultHandler(event:ResultEvent):void
			{
				selectMst = parseInt(event.result.toString());

				// 2016/02/24 DA upd start
				selectMst_Label.text = MstSelectEvent.getMasterName(selectMst);

				//if (selectMst==1) {
				if (MstSelectEvent.isReal(selectMst)) {
				// 2016/02/24 DA upd end
					//
					// 本番マスタ選択時
					//
					// 2016/02/24 DA del start
					//selectMst_Label.text = "本番";
					// 2016/02/24 DA del end
					btnSaveData.enabled = false;
					grid.editable = "false";
					grid.dragEnabled = false;
					grid.dropEnabled = false;

				} else {
					//
					// 仮マスタ選択時
					//
					// 2016/02/24 DA del start
					//selectMst_Label.text = "仮";
					// 2016/02/24 DA del end
					btnSaveData.enabled = true;

					grid.editable = "true";
					grid.dragEnabled = true;
					grid.dropEnabled = true;

					// 2016/02/24 DA del start
//					/**
//					 * アプリケーション初期化
//					 * ・コンテキストメニューの準備
//					 */
//					rmenu = new ContextMenu();
//					rmenu.hideBuiltInItems();
//					rmenu.addEventListener(ContextMenuEvent.MENU_SELECT, rmenu_menuSelectHandler);
//					rmenuitem1 = new ContextMenuItem("行を追加");
//					rmenuitem1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addRowHandler);
//					rmenu.customItems.push(rmenuitem1);
//					rmenuitem2 = new ContextMenuItem("行を削除");
//					rmenuitem2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removeRowHandler);
//					rmenu.customItems.push(rmenuitem2);
					// 2016/02/24 DA del end
				}
			}

			/**
			 * 右クリックメニュー表示時の処理
			 */
			private function rmenu_menuSelectHandler(event:ContextMenuEvent):void {
				// 右クリックされた行を保持しておく
				if (-1 < rmenuIndex && rmenuIndex < ac.length) {
					rmenuItem = ac.getItemAt(rmenuIndex) as MGroup;
				} else {
					rmenuItem = null;
				}
			}

			/**
			 * 行追加の処理。
			 * 追加可能であるかチェックします。
			 */
			private function addRowHandler(item:ContextMenuEvent):void {
				// 車種選択チェック
				if (Utils.isEmpty(editBctype)) {
					Alert.show("車種を選択して検索してください", TITLE);
					return;
				}

				// グループ数チェック
				if (ac.length >= 99) {
					Alert.show("これ以上、工程の追加はできません。工程は最大99件です。", TITLE)
					return;
				}

				var group:MGroup = new MGroup();
				group.bctype = editBctype;
				group.insertUser = loginUser;
				group.editDiv = "I";
				// 2014/04/07 DA ins start
				group.line = null;
				group.area = null;
				// 2014/04/07 DA ins end

				// 2016/02/24 DA ins start
				group.mstVer = selectMst;
				group.groupName = ""; // 工程名は空白
				group.nonDisplayFlag = false; // PDA非表示を未選択にする
				// 2016/02/24 DA ins end

				// 右クリックした行番号を取得
				var row:int = 0;
				if (rmenuItem != null) {
					row = ac.getItemIndex(rmenuItem) + 1;
				}
				ac.addItemAt(group, row);
				// 追加した行を選択状態にする
				grid.selectedIndex = row;

				// Group No.の採番
				renumGroupNo();
			}

			/**
			 * 行削除の処理。
			 * 削除可能であるかチェックします。
			 */
			private function removeRowHandler(item:ContextMenuEvent):void {
				// 行選択チェック
				if (rmenuItem == null) {
					Alert.show("削除対象の行を右クリックしてください", TITLE);
					return;
				}

				var group:MGroup = rmenuItem;
				// 右クリックした行番号を取得
				var row:int = ac.getItemIndex(group);
				if (group.editDiv != "I") {
					// 新規追加した行でなければ、削除した行を削除用配列に退避
					group.updateUser = loginUser;

					removedRows.addItem(group);
					ac.removeItemAt(row);
				} else {
					ac.removeItemAt(row);
				}
				// Group No.の採番
				renumGroupNo();
			}

			/**
			 * グループNo.採用番処理。
			 * グリッドの先頭から順に番号を振ります。
			 */
			private function renumGroupNo():void {
				// グループNo.をグリッドの先頭から順に割り振る。
				var group:MGroup;
				var groupNo:String;

				for (var loop_cnt:int =1;loop_cnt <= ac.length; loop_cnt++) {
					group = ac[loop_cnt-1] as MGroup;

					if (loop_cnt<10) {
						// グループNo.は2桁0埋め
						groupNo = "0" + loop_cnt.toString();
					} else {
						groupNo = loop_cnt.toString();
					}

					// 新規追加、編集済み以外のデータが移動された場合は編集区分'M'をセット
					if (group.groupNo != groupNo ) {
						if(group.editDiv != "I" && group.editDiv != "U"){
							group.updateUser = loginUser;
							group.editDiv = "M";
						}
						group.groupNo = groupNo;
					}
				}
			}

			/**
			 * グリッドの値を持つArrayの値が変更された時の処理。
			 * グリッドの新規追加・削除・更新に対応した処理を行います。
			 */
			protected function ac_collectionChangeHandler(event:CollectionEvent):void
			{
				switch(event.kind) {
					case CollectionEventKind.ADD:

						// Group No.の採番
						// Drag & Drop完了時の為にグループNo.の採番を行う。
						//  -> DragDrop Event時には配列データが並び変わっていない。
						renumGroupNo();
						break;
					case CollectionEventKind.REMOVE:

						// Group No.の採番
						// Drag & Drop完了時の為にグループNo.の採番を行う。
						//  -> DragDrop Event時には配列データが並び変わっていない。
						renumGroupNo();
						break;


					case CollectionEventKind.UPDATE:

						// グループ名以外の変更は無視
						if ((event.items[0] as PropertyChangeEvent).property == "groupName" || (event.items[0] as PropertyChangeEvent).property == "nonDisplayFlag")
						{
							var editDiv:String = (ac[grid.selectedIndex] as MGroup).editDiv;

							if (editDiv != "I") {
								// 新規に追加した行でなければ編集区分にU:変更をセットし、
								// 更新者にログインユーザーをセット
								(ac[grid.selectedIndex] as MGroup).editDiv = "U";
								(ac[grid.selectedIndex] as MGroup).updateUser = loginUser;
							}
						}
						break;

					// 2016/02/24 DA ins start
					case CollectionEventKind.RESET:
						this.grid.verticalScrollPosition = this.gridScrollPosition;
						this.grid.initialize();
						this.grid.dataProvider.refresh();
						break;
					// 2016/02/24 DA ins end

				}
			}

			/**
			 * 検索ボタン押下時の処理
			 */
			protected function btnGetData_clickHandler(event:MouseEvent):void
			{
				// 車種選択チェック
				if (ddlVehicle.selectedItem == null) {
					Alert.show("車種を選択してください", TITLE);
					return;
				}

				// 2016/02/24 DA del start
				//// 選択された車種を取得
				//editBctype = (ddlVehicle.selectedItem as MVehicle).bctype;
				// 2016/02/24 DA del end

				// 変更有無チェック
				if (existsUpdate()) {
					// 変更あり
					Alert.show(
						"変更が保存されていません。\n検索すると変更が破棄されます。よろしいですか？",
						TITLE,
						Alert.OK | Alert.CANCEL, this,
						function(event:CloseEvent):void {
							if (event.detail == Alert.OK) {
								itemDataGet();
								return;
							}
						},
						// 2016/08/29 DA ins start
						null,
						Alert.CANCEL
						// 2016/08/29 DA ins end
					);
				} else {
					// 変更なし
					itemDataGet();
				}

			}

			/**
			 * 工程一覧を取得（removedRowsの初期化も同時に行う）
			 */
			protected function itemDataGet():void
			{
				// 2016/02/24 DA upd start
				// 車種を取得
				editBctype = (ddlVehicle.selectedItem as MVehicle).bctype;

				if (MstSelectEvent.isTemporary(selectMst)) {
					// 車種の予約フラグを取得
					srvMstRegist.isReservedVehicle(selectMst, editBctype);
				}
				else {
					modeContextMenu = 0;
					getItemData();
				}
				// 2016/02/24 DA upd end
			}

			// 2016/02/24 DA ins start
			/**
			 * 表示するデータを取得
			 */
			private function getItemData():void
			{
				// 本番or仮テーブルの取得
				srv.getMGroups(selectMst, null, editBctype);

				// removedRowsを初期化
				removedRows = new ArrayCollection();
				
				this.gridScrollPosition = this.grid.verticalScrollPosition;
				this.grid.initialize();
				this.grid.dataProvider.refresh();
			}

			/**
			 * 車種の予約フラグ取得成功時の処理
			 */
			protected function isReservedVehicle_resultHandler(event:ResultEvent):void
			{
				var blnOn:Boolean = false;
				
				if (event.result != null && event.result) {
					blnOn = false;
					isReservedMVehicle = true;
				}
				else {
					isReservedMVehicle = false;
					if (MUserUtils.isAdministrator(this.loginUserInfo)) {
						// マスタ管理者
						if (MstSelectEvent.isReal(selectMst)) {
							blnOn = false;
						} else {
							blnOn = true;
						}
						
					} else {
						// 以外
						blnOn = false;
					}
				}
				if (blnOn) {
					btnSaveData.enabled = true;
					grid.editable = "true";
					grid.dragEnabled = true;
					grid.dropEnabled = true;
					modeContextMenu = 1;
					
					/**
					 * アプリケーション初期化
					 * ・コンテキストメニューの準備
					 */
					rmenu = new ContextMenu();
					rmenu.hideBuiltInItems();
					rmenu.addEventListener(ContextMenuEvent.MENU_SELECT, rmenu_menuSelectHandler);
					rmenuitem1 = new ContextMenuItem("行を追加");
					rmenuitem1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addRowHandler);
					rmenu.customItems.push(rmenuitem1);
					rmenuitem2 = new ContextMenuItem("行を削除");
					rmenuitem2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removeRowHandler);
					rmenu.customItems.push(rmenuitem2);
					
				} else {
					// 予約の場合は保存ボタンを非活性する
					btnSaveData.enabled = false;
					grid.editable = "false";
					grid.dragEnabled = false;
					grid.dropEnabled = false;
					modeContextMenu = 0;
				}

				getItemData();
			}
			// 2016/02/24 DA ins end

			/**
			 * 保存ボタン押下時の処理。
			 */
			protected function btnSaveData_clickHandler(event:MouseEvent):void
			{
				// 変更有無チェック
				if (!existsUpdate()) {
					Alert.show("保存する内容がありません", TITLE);
					return;
				}

				// 2016/02/24 DA ins start
				// 予約中チェック
				srvMstRegistSave.isReservedVehicle(selectMst, editBctype);
				// 2016/02/24 DA ins end
			}

			/**
			 * 保存ボタン押下時の処理（チェック後の処理）
			 */
			protected function save_isReservedVehicle_resultHandler(event:ResultEvent):void
			{
				// 2016/02/24 DA ins start
				if (event.result != null && event.result) {
					// 予約されているため、保存することができません。
					Alert.show(resourceManager.getString('message','msg00023'), TITLE);
					return;
				}
				// 2016/02/24 DA ins end

				// グループ名チェック 空白は不可
				var group:MGroup;
				var loop_cnt:int;

				for ( loop_cnt =0;loop_cnt < ac.length; loop_cnt++) {
					group = ac[loop_cnt] as MGroup;
					var gpName:String = group.groupName;
					if (Utils.isSpaceJ(gpName)){
						Utils.gridSelectRow(grid,loop_cnt);
						Alert.show("工程名が空白です。", TITLE);
						return;
					}
					if (gpName.length > 30){
						Utils.gridSelectRow(grid,loop_cnt);
						Alert.show("工程名を30文字以下にしてください。", TITLE);
						return;
					}
					for ( var i:int =0;i < ac.length; i++) {
						var gp : MGroup = ac[i] as MGroup;
						if (loop_cnt == i){
							continue;
						}
						if (Utils.jTrim(gpName) == Utils.jTrim(gp.groupName)){
							Utils.gridSelectRow(grid,loop_cnt);
							Alert.show("工程名が重複しています。", TITLE);
							return;
						}
					}
					// 2014/04/07 DA ins start
					var line:String = mx.utils.StringUtil.trim(group.line);
					if (group.line == null || line == ""){
						Utils.gridSelectRow(grid,loop_cnt);
						Alert.show("ラインが設定されていません。", TITLE);
						return;
					}
					if (group.area == null || group.area == ""){
						Utils.gridSelectRow(grid,loop_cnt);
						Alert.show("エリアが設定されていません。", TITLE);
						return;
					}
					// 2014/04/07 DA ins end
				}

				// 2016/02/24 DA ins start
				// 表示行を一時退避する
				this.gridScrollPosition = this.grid.verticalScrollPosition;
				// 2016/02/24 DA ins end

				//保存ボタンを非活性にする
				btnSaveData.enabled = false;

				// 変更内容をデータベースに反映
				srv.updateAll(ac, removedRows);

				// データベースから最新のデータを取得
				itemDataGet();
			}


			/**
			 * 終了ボタン押下時の処理。
			 */
			private function btnExit_clickHandler(event:MouseEvent):void
			{
				if (existsUpdate()) {
					// 編集あり
					var myAlert : Alert = Alert.show(
								"変更が保存されていません。\n終了すると変更が破棄されます。よろしいですか？",
								TITLE,
								Alert.OK | Alert.CANCEL, null, alertCloseHandler,
								// 2016/08/29 DA ins start
								null,
								Alert.CANCEL
								// 2016/08/29 DA ins end
							);
					return;
				}

				// メニュー画面に戻る
				close();
			}


			/**
			 * 終了確認ダイアログの結果処理。
			 */
			private function alertCloseHandler(e:CloseEvent) : void
			{
				if (e.detail == Alert.OK) {
					close();
					return;
				}
			}


			/**
			 * ユーザーによる変更があったかどうかをチェックします。
			 * 【戻り値】true:変更あり、false:変更なし
			 */
			private function existsUpdate():Boolean
			{
				// 削除有無チェック
				if (removedRows.length > 0) {
					// 変更あり
					return true;
				}

				// 追加、変更有無チェック
				if (ac != null) {
					for (var loop_cnt:int =0;loop_cnt < ac.length; loop_cnt++) {
						var group:MGroup = ac[loop_cnt] as MGroup;
						if (group.editDiv != null) {
							// 変更あり
							return true;
						}
					}
				}

				// 変更なし
				return false;
			}

			/**
			 * 表示された画面を閉じ、ページ遷移を行います。
			 */
			private function close():void
			{
				// マスタメンテナンスメニュー画面に遷移する
				var request:URLRequest = new URLRequest("master_menu.html");
				navigateToURL(request, "_self");
			}

			/**
			 * Data更新正常完了時の処理。
			 */
			private function onUpdateAllResult(e:ResultEvent):void
			{
				Alert.show("保存が完了しました。", TITLE);
				btnSaveData.enabled = true;
			}

			/**
			 * Data更新失敗時の処理。
			 */
			private function onUpdateAllFault(e:FaultEvent):void
			{
				Alert.show("保存に失敗しました。", TITLE);
				btnSaveData.enabled = true;
			}

			/**
			 * グループ取得成功時の処理。
			 */
			protected function getMGroups_resultHandler(event:ResultEvent):void
			{
				// 右クリックメニューを設定する
				// 2016/02/24 DA upd start
				if (modeContextMenu == 0 || ac.length == 0) {
					grid.contextMenu = null;
				}
				else {
					grid.contextMenu = rmenu;
				}
				// 2016/02/24 DA upd end
			}

			/**
			 * グループ取得失敗時の処理。
			 */
			private function ongetMGroupsFault(e:FaultEvent):void
			{
				Alert.show("データの取得に失敗しました。", TITLE);
			}

			/**
			 * グリッド上のデータにマウスが乗ったときの処理
			 */
			protected function grid_itemRollOverHandler(event:ListEvent):void
			{
				// マウスカーソルの乗っている行を保持しておく。
				// 右クリックで使用する
				rmenuIndex = event.rowIndex;
			}

			/**
			 * 	ドラッグ＆ドロップ時の処理。
			 *  ctrlキーの制御を行います。
			 */
			protected function grid_dragDropHandler(event:DragEvent):void
			{
				//コントロールキーが押されていたら処理をキャンセルする
				if(event.ctrlKey){
					event.preventDefault();
				}
			}
			
			// 2016/02/24 DA ins start
			/**
			 * スクロール時に正しいデータを表示する
			 */
			protected function grid_scrollHandler(event:ScrollEvent):void
			{
				this.gridScrollPosition = this.grid.verticalScrollPosition;
			}
			// 2016/02/24 DA ins end

			// 2016/02/24 DA ins start
			/**
			 * ユーザーログイン情報の取得後の処理。
			 */
			protected function getMUser_resultHandler(event:ResultEvent):void {
				this.loginUserInfo = event.result as MUser;
				this.enabledComponent();
			}
			
			/**
			 * コンポーネントの制御をする
			 */
			private function enabledComponent():void
			{
				if (MUserUtils.isAdministrator(this.loginUserInfo)) {
					// マスタ管理者
					if (MstSelectEvent.isReal(selectMst)) {
						this.grid.editable = "false";
						this.btnSaveData.enabled = false;
					} else {
						this.grid.editable = "true";
						this.btnSaveData.enabled = true;
					}
					
				} else {
					// 以外
					this.grid.editable = "false";
					this.btnSaveData.enabled = false;
				}
			}
			// 2016/02/24 DA ins end
		]]>

	</fx:Script>
	<fx:Declarations>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
		<s:RemoteObject id="srv" destination="MGroupService">
			<s:method name="updateAll" result="onUpdateAllResult(event)"  fault="onUpdateAllFault(event)"/>
			<s:method name="getMGroups" result="getMGroups_resultHandler(event)" fault="ongetMGroupsFault(event)"/>
		</s:RemoteObject>

		<s:RemoteObject id="srvVehicle" destination="MVehicleService">
			<s:method name="getMVehicle" fault="ongetMGroupsFault(event)"/>
		</s:RemoteObject>

		<s:RemoteObject id="srvUser" destination="MUserService">
			<s:method name="getUserCode" result="getUserCode_resultHandler(event)"/>
			<s:method name="getSelectMst" result="getSelectMst_resultHandler(event)"/>
			<s:method name="getMUser" result="getMUser_resultHandler(event)"/>
		</s:RemoteObject>

		<!-- 2016/02/24 DA ins start -->
		<s:RemoteObject id="srvMstRegist" destination="mstRegistService">
			<s:method name="isReservedVehicle" result="isReservedVehicle_resultHandler(event)" />
		</s:RemoteObject>
		<s:RemoteObject id="srvMstRegistSave" destination="mstRegistService">
			<s:method name="isReservedVehicle" result="save_isReservedVehicle_resultHandler(event)" />
		</s:RemoteObject>
		<!-- 2016/02/24 DA ins end -->

		<s:ArrayCollection id="ac" collectionChange="ac_collectionChangeHandler(event)" list="{grid.dataProvider as IList}" />
	</fx:Declarations>

	<s:HGroup width="100%" height="24" fontFamily="ＭＳ ゴシック">
		<s:HGroup width="50%" height="24" verticalAlign="middle">
			<s:Label text="工程マスタメンテナンス" fontSize="14" fontWeight="bold" textAlign="left"/>
		</s:HGroup>
		<s:HGroup width="50%" height="24" horizontalAlign="right" verticalAlign="middle">
			<s:Label text="マスタ選択" textAlign="right"/>
			<s:Label text="仮" fontWeight="bold" id="selectMst_Label"/>
		</s:HGroup>
	</s:HGroup>
	<s:HGroup width="100%" height="24" verticalAlign="middle">
		<s:Label text="車種："/>
		<s:DropDownList id="ddlVehicle" dataProvider="{srvVehicle.getMVehicle.lastResult}" labelField="vehicleName"></s:DropDownList>
		<mx:Spacer width="16" height="100%"/>
		<s:Button label="検索" height="30" id="btnGetData" click="btnGetData_clickHandler(event) "/>
	</s:HGroup>
	<mx:AdvancedDataGrid id="grid" left="20" right="12" top="20" bottom="60" width="100%"
						 height="100%" dataProvider="{srv.getMGroups.lastResult}"
						 designViewDataType="flat" dragDrop="grid_dragDropHandler(event)"
						 dragMoveEnabled="true" editable="true"
						 itemRollOver="grid_itemRollOverHandler(event)" sortExpertMode="true"
						 variableRowHeight="true"
						 scroll="grid_scrollHandler(event)">
		<mx:columns>
			<mx:AdvancedDataGridColumn headerText="No" editable="false" width="60" sortable="false"
									   dataField="groupNo" backgroundColor="#C4C4C4" textAlign="right"/>
			<mx:AdvancedDataGridColumn headerText="工程名" dataField="groupName" sortable="false"
									   itemRenderer="jp.co.ctc.components.BackgroundColorItemRenderer"/>
			<!-- 2014/04/07 DA ins start -->
			<mx:AdvancedDataGridColumn width="60" dataField="line" headerText="ライン" editable="false"
									   itemRenderer="jp.co.ctc.components.ComboBoxLine"
									   sortable="false"/>
			<mx:AdvancedDataGridColumn width="120" dataField="area" headerText="エリア" editable="false"
									   itemRenderer="jp.co.ctc.components.ComboBoxArea"
									   sortable="false">
			</mx:AdvancedDataGridColumn>
			<!-- 2014/04/07 DA ins end -->

			<!-- 2016/02/24 DA ins start -->
			<mx:AdvancedDataGridColumn width="80" dataField="nonDisplayFlag" headerText="{resourceManager.getString('resource','cli1100001')}" editable="false"
									   itemRenderer="jp.co.ctc.components.CheckBox"
									   sortable="false"/>
			<!-- 2016/02/24 DA ins end -->
			<mx:AdvancedDataGridColumn headerText="更新者" dataField="updateUser" labelFunction="Utils.updateUserToLabel" editable="false" width="100" backgroundColor="#C4C4C4" sortable="false"/>
			<mx:AdvancedDataGridColumn headerText="更新日" dataField="updateDate" labelFunction="Utils.updateDateToLabel" sortable="false"
									   editable="false" backgroundColor="#C4C4C4" width="120" textAlign="right"/>
			<mx:AdvancedDataGridColumn headerText="BC車種区分" dataField="bctype" editable="false" visible="false" sortable="false"/>
		</mx:columns>
	</mx:AdvancedDataGrid>
	<s:HGroup width="200" height="30" verticalAlign="middle" horizontalAlign="center">
		<s:Button label="保存" height="30" id="btnSaveData" click="btnSaveData_clickHandler(event)"/>
		<s:Button label="終了" height="30" id="btnExit" click="btnExit_clickHandler(event)"/>
	</s:HGroup>
</s:Application>
